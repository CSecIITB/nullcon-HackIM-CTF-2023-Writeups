from Crypto.Util.number import long_to_bytes

C1 = 919052997942427307726583335637159074460863592763419213239331601517138499346034489264805275246795047403378055738568713378177590755883226021551548871645003631552026681627296633273433797487415716926723029871442662900749190470163667208454128508790282471679591695692053573482413544308508462036639735286639212087590592847936585543335950629909021736410714681667083165916884036779009406845246284057242619731653612075480782691343683777055465013274434160784537532244068414760340433467741472814246493488575884022713448634683073688063747738523053811306156333568351053594637905935615148751767918930618350137922900548902927697909
C2 = 14743668642440243543492861117016936663893228627335542739791839186975127534122994903465929852909201858028177975052037346463577142447425255657006049889597834425593873332888179764909368022041648150310497469594267062347791382917523654105300840617809311482917671490044874249854541153029953731060325080194882352991230908200543319719548031971654084745587253903494440360040708406458043146859386635281890364297268716286842255094806976955660578251715848490044584347587808944311681537115568328574580752669084215810246859345376623610139105217494841550615603106907559492675963257888490673532140829020897240260833251495982775692830
N = 30365438743698062397406930590949269280593048377850893613413558166236105244083066056495446502323868239203526962089713620387515798023123230010124377575540557582429186708428668867093995765077728669594890084306388503647802964757302289760685819602551597527355487132115877795021324835185505651991755830083321281510280709767186980834085346023734786595739310306267562611674462733516685699311769265913880592132764370784305505650526655107465772214479832986381272985584375802890178838921661673848530894049243701012349431866390642722353500240314560001617057489476106062378326273333365822122131795069188464898611484493332124596553

e = 3

# ===== Coppersmith's Short Pad Attack =====
PRxy.<x,y> = PolynomialRing(Zmod(N))
PRx.<xN> = PolynomialRing(Zmod(N))
PRZZ.<xz,yz> = PolynomialRing(Zmod(N))
 
g1 = (x**e - C1).change_ring(PRZZ)
g2 = ((x + y)**e - C2).change_ring(PRZZ)
 
h = g2.resultant(g1)
h = h.univariate_polynomial()
h = h.change_ring(PRx).subs(y=xN)
h = h.monic()
 
# ===== Coppersmith's Method =====
roots = h.small_roots(X=2**128, beta=0.3)
# ===== Coppersmith's Method =====

delta = roots[0]
if delta > 2**32:
    delta = -delta
    C1, C2 = C2, C1

# ===== Franklin-Reiter =====
x = PRx.gen()
g1 = x**e - C1
g2 = (x + delta)**e - C2
 
while g2:
    g1, g2 = g2, g1 % g2
 
g = g1.monic() 
pt = -g[0]
# ===== Franklin-Reiter =====
# ===== Coppersmith's Short Pad Attack =====

print(long_to_bytes(int(pt)))
