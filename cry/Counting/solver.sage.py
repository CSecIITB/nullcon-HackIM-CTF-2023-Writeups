

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10008 = Integer(10008); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_14742040721959145907193572581985425355144223517251720423344555860334469384344331453461432520225229560708860839963921269139728846210643721220943102544658968920505450496 = Integer(14742040721959145907193572581985425355144223517251720423344555860334469384344331453461432520225229560708860839963921269139728846210643721220943102544658968920505450496); _sage_const_1942668892225729070919461906823518906642406839052139521251812409738904285205208498176 = Integer(1942668892225729070919461906823518906642406839052139521251812409738904285205208498176); _sage_const_40 = Integer(40); _sage_const_1337 = Integer(1337); _sage_const_256 = Integer(256)
from pwn import *
from sage.all import *
from Crypto.Util.number import long_to_bytes

HOST = "52.59.124.14"
PORT = int(_sage_const_10008 )
target = remote(HOST, PORT)

def recvline():
    return target.recvuntil(b"\n").decode()

recvline() # My public modulus is:
n = int(recvline())
recvline() # Let me count how long it takes you to find the secret token.
c1 = int(recvline())
recvline() # What is your guess?
target.sendline(b"1")
c2 = int(recvline())
recvline() # What is your guess?

#===
def gcd(a, b):
    while b:
        a, b = b, a%b
    return a.monic()



def franklinreiter(C1, C2, e, N, a, b):
    P = PolynomialRing(Zmod(N), names=('X',)); (X,) = P._first_ngens(1)
    g1 = (a*X + b)**e - C2
    g0 = X**e - C1

    g = gcd(g0, g1)
    if g == _sage_const_1 :
        return -_sage_const_1 
    else:
        return int(-g[_sage_const_0 ])%n

a = _sage_const_1 
bx = _sage_const_14742040721959145907193572581985425355144223517251720423344555860334469384344331453461432520225229560708860839963921269139728846210643721220943102544658968920505450496 
b = _sage_const_1942668892225729070919461906823518906642406839052139521251812409738904285205208498176 

for i in range(_sage_const_0 , _sage_const_40 ):
    print(i)
    #print(i, franklinreiter(c1, c2, 1337, n, a, b))
    if franklinreiter(c1, c2, _sage_const_1337 , n, a, b) != -_sage_const_1 :
        print(i)
        #print(long_to_bytes(franklinreiter(c1, c2, 1337, n, a, b))[-k:])
        #print(long_to_bytes(franklinreiter(c1, c2, 1337, n, a, b))[-34:])

        #token = long_to_bytes(franklinreiter(c1, c2, 1337, n, a, b))[-34:]
        token = long_to_bytes(franklinreiter(c1, c2, _sage_const_1337 , n, a, b))[-i:]
        break
    b *= _sage_const_256 

# token is a bytes object
target.sendline(token)
target.interactive()

